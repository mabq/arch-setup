# https://wiki.hyprland.org/Configuring/Variables/

general {
    # - size of the border around windows
    # border_size = 1

    # - disable borders for floating windows
    # no_border_on_floating = false

    # - gaps between windows
    gaps_in = 0

    # - gaps between windows and monitor edges
    gaps_out = 0

    # - gaps between workspaces (stacks with gaps_out)
    # gaps_workspaces = 0

    # - border color for inactive windows
    #   (must be different from background color to recognize the limits of floating windows)
    col.inactive_border = $color_inactive_border

    # - border color for the active window
    col.active_border = $color_active_border1 $color_active_border2 45deg

    # - inactive border color for window that cannot be added to a group
    # col.nogroup_border =

    # - active border color for window that cannot be added to a group
    # col.nogroup_border_active =

    # - which layout to use (dwindle or master)
    # layout = dwindle

    # - if true, will not fall back to the next available window when moving focus in a direction where no window was found
    # no_focus_fallback = false

    # - enables resizing windows by clicking and dragging on borders and gaps
    # resize_on_border = false

    # - extends the area around the border where you can click and drag on, only used when general:resize_on_border is on.
    # extend_border_grab_area = 15

    # - show a cursor icon when hovering over borders, only used when general:resize_on_border is on.
    # hover_icon_on_border = true

    # - master switch for allowing tearing to occur (https://wiki.hyprland.org/Configuring/Tearing/)
    # allow_tearing = false

    # - force floating windows to use a specific corner when being resized (1-4 going clockwise from top left, 0 to disable)
    # resize_corner = 0

    snap {
      # enable snapping for floating windows
      # enabled = false

      # minimum gap in pixels between windows before snapping
      # window_gap = 10

      # minimum gap in pixels between window and monitor edges before snapping
      # monitor_gap = 10

      # if true, windows snap such that only one border’s worth of space is between them
      # border_overlap = false
    }
}

decoration {
    # - rounded corners’ radius (in layout px)
    # rounding = 0

    # - opacity of active windows (0.0 - 1.0)
    # active_opacity = 1.0

    # - opacity of inactive windows (0.0 - 1.0)
    # inactive_opacity = 1.0

    # - opacity of fullscreen windows (0.0 - 1.0)
    # fullscreen_opacity = 1.0

    # enables dimming of inactive windows
    # dim_inactive = false

    # - how much inactive windows should be dimmed, 0.0 - 1.0
    # dim_strength = 0.5

    # - how much to dim the rest of the screen by when a special workspace is open. 0.0 - 1.0
    dim_special = 0.3

    # - how much the dimaround window rule should dim by. 0.0 - 1.0
    # dim_around = 0.4

    # - a path to a custom shader to be applied at the end of rendering. See examples/screenShader.frag for an example.
    #screen_shader =

    blur {
        # - enable kawase window background blur
        enabled = false

        # - blur size (distance)
        # size = 8

        # - the amount of passes to perform
        # passes = 1

        # - make the blur layer ignore the opacity of the window
        # ignore_opacity = false

        # - whether to enable further optimizations to the blur. Recommended to leave on, as it will massively improve performance.
        # new_optimizations = true

        # - if enabled, floating windows will ignore tiled windows in their blur. Only available if blur_new_optimizations is true. Will reduce overhead on floating blur significantly.
        # xray = false

        # - how much noise to apply. 0.0 - 1.0
        # noise = 0.0117

        # - contrast modulation for blur. 0.0 - 2.0
        # contrast = 0.8916

        # - brightness modulation for blur. 0.0 - 2.0
        # brightness = 0.8172

        # - increase saturation of blurred colors. 0.0 - 1.0
        # vibrancy = 0.1696

        # - how strong the effect of vibrancy is on dark areas . 0.0 - 1.0
        # vibrancy_darkness = 0.0

        # - whether to blur behind the special workspace (note: expensive)
        # special = false

        # - whether to blur popups (e.g. right-click menus)
        # popups = false

        # - works like ignorealpha in layer rules. If pixel opacity is below set value, will not blur. [0.0 - 1.0]
        # popups_ignorealpha = 0.2
    }

    shadow {
      # enable drop shadows on windows
      enabled = false

      # - shadow range (“size”) in layout px
      # range = 4

      # - (1 - 4), in what power to render the falloff (more power, the faster the falloff)
      # render_power = 3

      # - if enabled, will make the shadows sharp, akin to an infinite render power
      # sharp = false

      # - if true, the shadow will not be rendered behind the window itself, only around it.
      # ignore_window = true

      # - shadow’s color. Alpha dictates shadow’s opacity.
      # color = rgba(1a1a1aee)

      # - inactive shadow color. (if not set, will fall back to col.shadow)
      # color_inactive = unset
      #
      # - shadow’s rendering offset
      # offset = 0,0
      #
      # - shadow’s scale. 0.0 - 1.0
      # scale = 1.0
    }
}

# animations {
    # - enable animations
    #   makes everything more snappier, specially toggle fullscreen (no stretching)
    # enabled = false

    # - enable first launch animation
    # first_launch_animation = false
# }

input {
    # - appropriate XKB keymap parameter (You can find a list of models, layouts, variants and options in `/usr/share/X11/xkb/rules/base.lst`. Alternatively, you can use the `localectl` command to discover what is available on your system)
    # kb_model =

    # - appropriate XKB keymap parameter
    kb_layout = us,us

    # - appropriate XKB keymap parameter
    kb_variant = ,intl

    # - appropriate XKB keymap parameter
    kb_options = grp:shifts_toggle

    # - appropriate XKB keymap parameter
    # kb_rules =

    # - appropriate XKB keymap parameter
    # kb_file =

    # - engage numlock by default.
    numlock_by_default = true

    # - Determines how keybinds act when multiple layouts are used.
    # resolve_binds_by_sym = false

    # - the repeat rate for held-down keys, in repeats per second
    repeat_rate = 25

    # - delay before a held-down key is repeated, in milliseconds.
    repeat_delay = 250

    # - sets the mouse input sensitivity. Value will be clamped to the range -1.0 to 1.0.
    # sensitivity = 0.0

    # - sets the cursor acceleration profile (adaptive or flat). Leave empty to use libinput’s default mode for your input device.
    # accel_profile =

    # - Force no cursor acceleration. This bypasses most of your pointer settings to get as raw of a signal as possible. Enabling this is not recommended due to potential cursor desynchronization.
    # force_no_accel = false

    # - switches RMB and LMB
    # left_handed = false

    # - Sets the scroll acceleration profile, when accel_profile is set to custom. Has to be in the form <step> <points>. Leave empty to have a flat scroll curve.
    # scroll_points =

    # - sets the scroll method. Can be one of 2fg (2 fingers), edge, on_button_down, no_scroll.
    # scroll_method =

    # - sets the scroll button. Has to be an int, cannot be a string. Check wev if you have any doubts regarding the ID. 0 means default.
    # scroll_button = 0

    # - if the scroll button lock is enabled, the button does not need to be held down. Pressing and releasing the button once enables the button lock, the button is now considered logically held down. Pressing and releasing the button a second time logically releases the button. While the button is logically held down, motion events are converted to scroll events.
    # scroll_button_lock = 0

    # - Multiplier added to scroll movement for external mice. Note that there is a separate setting for touchpad scroll_factor.
    # - Wayland is the display server (the protocol, think ECMAScript spec), Hyprland is the compositor (the implementation, like the V8 engine), libinput is a library used by wayland compositors to control input devices. Libinput can only be configured through the compositor.
    scroll_factor = 0.5

    # - inverts scrolling direction. When enabled, scrolling moves content directly instead of manipulating a scrollbar.
    # natural_scroll = false

    # - specify if and how cursor movement should affect window focus. See the note below.
    #    0 - Cursor movement will not change focus.
    #    1 - Cursor movement will always change focus to the window under the cursor.
    #    2 - Cursor focus will be detached from keyboard focus. Clicking on a window will move keyboard focus to that window.
    #    3 - Cursor focus will be completely separate from keyboard focus. Clicking on a window will not change keyboard focus.
    # follow_mouse = 1

    # - Controls the window focus behavior when a window is closed. When set to:
    #    0 - focus will shift to the next window candidate
    #    1 - focus will shift to the window under the cursor.
    # focus_on_close = 0

    # - if disabled and `follow_mouse=1` then mouse focus will not switch to the hovered window unless the mouse crosses a window boundary
    # mouse_refocus = true

    # - if enabled (1 or 2), focus will change to the window under the cursor when changing from tiled-to-floating and vice versa.
    #   If 2, focus will also follow mouse on float-to-float switches.
    float_switch_override_focus = 2

    # - if enabled, having only floating windows in the special workspace will not block focusing windows in the regular workspace.
    # special_fallthrough = false

    # - Handles axis events around (gaps/border for tiled, dragarea/border for floated) a focused window.
    #    0 ignores axis events
    #    1 sends out-of-bound coordinates
    #    2 fakes pointer coordinates to the closest point inside the window
    #    3 warps the cursor to the closest point inside the window
    # off_window_axis_events = 1

    # - Emulates discrete scrolling from high resolution scrolling events.
    #    0 - disables it
    #    1 - enables handling of non-standard events only
    #    2 - force enables all scroll wheel events to be handled
    #    (this is what solved the steped scrolling)
    emulate_discrete_scroll = 0

    touchpad {
        # - disable the touchpad while typing
        # disable_while_typing = true

        # - inverts scrolling direction. When enabled, scrolling moves content directly instead of manipulating a scrollbar
        natural_scroll = true

        # - multiplier applied to the amount of scroll movement
        # scroll_factor = 1.0

        # - sending LMB and RMB simultaneously will be interpreted as a middle click. This disables any touchpad area that would normally send a middle click based on location.
        # middle_button_emulation = false

        # - sets the tap button mapping for touchpad button emulation. Can be one of lrm (default) or lmr (Left, Middle, Right Buttons).
        # tap_button_map =

        # - button presses with 1, 2, or 3 fingers will be mapped to LMB, RMB, and MMB respectively. This disables interpretation of clicks based on location on the touchpad.
        # clickfinger_behavior = false

        # - tapping on the touchpad with 1, 2, or 3 fingers will send LMB, RMB, and MMB respectively
        # tap-to-click = true

        # - when enabled, lifting the finger off for a short time while dragging will not drop the dragged item.
        # drag_lock = false

        # - sets the tap and drag mode for the touchpad
        # tap-and-drag = false
    }

    # touchdevice {
        # - transform the input from touchdevices. The possible transformations are the same as those of the monitors
        # transform = 0

        # - the output to bind touch devices. Empty means unset and will use the current / autodetected
        # output =

        # - Whether input is enabled for touch devices
        # enabled = true
    # }

    # tablet {
        #  - transform the input from tablets. The possible transformations are the same as those of the monitors
        # transform = 0

        #  - the output to bind tablets. Empty means unset and will use the current / autodetected
        # output =

        #  - position of the mapped region in output layout
        # region_position = [0,0]

        #  - size of the mapped region. When this variable is set, tablet input will be mapped to the region. [0, 0] or invalid size means unset
        # region_size = [0,0]

        # - whether the input should be relative
        # relative_input = false

        # - if enabled, the tablet will be rotated 180 degrees
        # left_handed = false

        # - size of tablet’s active area in mm
        # active_area_size = [0,0]

        # - position of the active area in mm
        # active_area_position = [0,0]
    # }
}

# gestures {
    # - enable workspace swipe gesture
    # workspace_swipe = true

    # - how many fingers for the gesture
    # workspace_swipe_fingers = 3

    # - if enabled, workspace_swipe_fingers is considered the minimum number of fingers to swipe
    # workspace_swipe_min_fingers = false

    # - in px, the distance of the gesture
    # workspace_swipe_distance = 300

    # - enable workspace swiping from the edge of a touchscreen
    # workspace_swipe_touch = false

    # - invert the direction
    # workspace_swipe_invert = true

    # - minimum speed in px per timepoint to force the change ignoring cancel_ratio. Setting to 0 will disable this mechanic
    # workspace_swipe_min_speed_to_force = 30

    # - (0.0 - 1.0) how much the swipe has to proceed in order to commence it. (0.7 -> if > 0.7 * distance, switch, if less, revert)
    # workspace_swipe_cancel_ratio = 0.5

    # - whether a swipe right on the last workspace should create a new one
    # workspace_swipe_create_new = true

    # - if enabled, switching direction will be locked when you swipe past the direction_lock_threshold
    # workspace_swipe_direction_lock =  true

    # - in px, the distance to swipe before direction lock activates
    # workspace_swipe_direction_lock_threshold = 10

    # - if enabled, swiping will not clamp at the neighboring workspaces but continue to the further ones
    # workspace_swipe_forever = false

    # - if enabled, swiping will use the r prefix instead of the m prefix for finding workspaces. (requires disabled workspace_swipe_numbered)
    # workspace_swipe_use_r = false
# }

# group {
    # - whether new windows in a group spawn after current or at group tail
    # insert_after_current = true

    # - whether Hyprland should focus on the window that has just been moved out of the group
    # focus_removed_window = true

    # - active group border color
    # col.border_active =

    # - inactive (out of focus) group border color
    # col.border_inactive =

    # - active locked group border color
    # col.border_locked_active =

    # - inactive locked group border color
    # col.border_locked_inactive =

    # groupbar {
        # - enables groupbars
        # enabled = false

        # - font used to display groupbar titles
        # font_family = monospace

        # - font size for the above
        # font_size = 8

        # - whether to draw gradients under the titles of the above
        # gradients = true

        # - height of the groupbar
        # height = 14

        # - render the groupbar as a vertical stack
        # stacked = false

        # - sets the decoration priority for groupbars
        # priority = 3

        # - whether to render titles in the group bar decoration
        # render_titles = false

        # - whether scrolling in the groupbar changes group active window
        # scrolling = true

        # - controls the group bar text color
        # text_color = 0xffffffff

        # - active group border color
        # col.active = 0x66ffff00

        # - inactive (out of focus) group border color
        # col.inactive = 0x66777700

        # - active locked group border color
        # col.locked_active = 0x66ff5500

        # - inactive locked group border color
        # col.locked_inactive = 0x66775500
    # }
# }

misc {
    # - disables the random hyprland logo / anime girl background
    disable_hyprland_logo = true

    # - disables the hyprland splash rendering. (requires a monitor reload to take effect)
    # disable_splash_rendering = false

    # - Changes the color of the splash text (requires a monitor reload to take effect).
    # col.splash = 0xffffffff

    # - Set the global default font to render the text including debug fps/notification, config error messages and etc., selected from system fonts.
    # font_family = monospace

    # - hanges the font used to render the splash text, selected from system fonts (requires a monitor reload to take effect).
    # splash_font_family =

    # - enforce any of the 3 default wallpapers. Setting this to 0 disables the anime background. -1 means “random”
    force_default_wallpaper = 0

    # - controls the VFR status of hyprland. Heavily recommended to leave on true to conserve resources
    # vfr = true

    # - controls the VRR (Adaptive Sync) of your monitors. 0 - off, 1 - on, 2 - fullscreen only
    # vrr = 0

    # - if DPMS is set to off, wake up the monitors if the mouse moves.
    # mouse_move_enables_dpms = true

    # - if DPMS is set to off, wake up the monitors if a key is pressed
    # key_press_enables_dpms = true

    # - will make mouse focus follow the mouse when drag and dropping. Recommended to leave it enabled, especially for people using focus follows mouse at 0.
    # always_follow_on_dnd = true

    # - if true, will make keyboard-interactive layers keep their focus on mouse move (e.g. wofi, bemenu)
    # layers_hog_keyboard_focus = true

    # - if true, will animate manual window resizes/moves
    # animate_manual_resizes = false

    # - if true, will animate windows being dragged by mouse, note that this can cause weird behavior on some curves
    # animate_mouse_windowdragging = false

    # - if true, the config will not reload automatically on save, and instead needs to be reloaded with hyprctl reload. Might save on battery.
    # disable_autoreload = false

    # - enable window swallowing
    # enable_swallow = false

    # - the class regex to be used for windows that should be swallowed (usually, a terminal)
    # swallow_regex =

    # - the title regex to be used for windows that should not be swallowed by the windows specified in swallow_regex (e.g. wev). The regex is matched against the parent (e.g. Kitty) window’s title on the assumption that it changes to whatever process it’s running
    # swallow_exception_regex =

    # - whether Hyprland should focus an app that requests to be focused (an activate request)
    # focus_on_activate = false

    # - whether mouse moving into a different monitor should focus it
    # mouse_move_focuses_monitor = true

    # - [Warning: buggy] starts rendering before your monitor displays a frame in order to lower latency
    # render_ahead_of_time = false

    # - how many ms of safezone to add to rendering ahead of time. Recommended 1-2
    # render_ahead_safezone = 1

    # - if true, will allow you to restart a lockscreen app in case it crashes (red screen of death)
    allow_session_lock_restore = true

    # - change the background color. (requires enabled disable_hyprland_logo)
    # background_color = 0x111111

    # - close the special workspace if the last window is removed
    # close_special_on_empty = true

    # - if there is a fullscreen window, whether a new tiled window opened should replace the fullscreen one or stay behind.
    #    0 - behind
    #    1 - takes over
    #    2 - unfullscreen the current fullscreen window
    new_window_takes_over_fullscreen = 2

    # - if true, closing a fullscreen window makes the next focused window fullscreen
    exit_window_retains_fullscreen = true

    # - if enabled, windows will open on the workspace they were invoked on.
    #   0 - disabled,
    #   1 - single-shot,
    #   2 - persistent (all children too)
    #   👀 Correct the bug where the window created with (on-created-emtpy, see workspace-rules) does not get focus when created
    #   https://github.com/hyprwm/Hyprland/issues/6038
    initial_workspace_tracking = 0

    # - whether to enable middle-click-paste (aka primary selection)
    # middle_click_paste = true
}

binds {
    # - if disabled, will not pass the mouse events to apps / dragging windows around if a keybind has been triggered
    # pass_mouse_when_bound = false

    # - in ms, how many ms to wait after a scroll event to allow to pass another one for the binds
    # scroll_event_delay = 300

    # - if enabled, an attempt to switch to the currently focused workspace will instead switch to the previous workspace
    # - (go to the desired workspace and quickly come back with the same key)
    # workspace_back_and_forth = false

    # - if enabled, workspaces don’t forget their previous workspace, so cycles can be created by switching to the first workspace in a sequence, then endlessly going to the previous workspace
    allow_workspace_cycles = true

    # whether switching workspaces should
    #    0 - center the cursor on the workspace, or
    #    1 - on the last active window for that workspace
    # workspace_center_on = 0

    # - sets the preferred focus finding method when using focuswindow/movewindow/etc with a direction.
    #    0 - history (recent have priority),
    #    1 - length (longer shared edges have priority)
    # focus_preferred_method = 0

    # - if enabled, dispatchers like moveintogroup, moveoutofgroup and movewindoworgroup will ignore lock per group
    # ignore_group_lock = false

    # - if enabled, when on a fullscreen window, movefocus will cycle fullscreen, if not, it will move the focus in a direction.
    # movefocus_cycles_fullscreen = true

    # - If enabled, apps that request keybinds to be disabled (e.g. VMs) will not be able to do so.
    # disable_keybind_grabbing = false

    # - If enabled, moving a window or focus over the edge of a monitor with a direction will move it to the next monitor in that direction.
    # window_direction_monitor_fallback = true
}

# xwayland {
    # - uses the nearest neighbor filtering for xwayland apps, making them pixelated rather than blurry
    # use_nearest_neighbor = true

    # - forces a scale of 1 on xwayland windows on scaled displays
    # force_zero_scaling = false
# }

# opengl {
    # - reduces flickering on nvidia at the cost of possible frame drops on lower-end GPUs. On non-nvidia, this is ignored.
    # nvidia_anti_flicker = true
# }

# render {
    # Whether to enable explicit sync support. Requires a hyprland restart. 0 - no, 1 - yes, 2 - auto based on the gpu driver
    # explicit_sync = 2

    # Whether to enable explicit sync support for the KMS layer. Requires explicit_sync to be enabled. 0 - no, 1 - yes, 2 - auto based on the gpu driver
    # explicit_sync_kms = 2

    # Enables direct scanout. Direct scanout attempts to reduce lag when there is only one fullscreen application on a screen (e.g. game). It is also recommended to set this to false if the fullscreen application shows graphical glitches.
    # direct_scanout = false
# }

cursor {
    # - sync xcursor theme with gsettings, it applies cursor-theme and cursor-size on theme load to gsettings making most CSD gtk based clients use same xcursor theme and size.
    # sync_gsettings_theme = true

    # - disables hardware cursors
    # no_hardware_cursors = false

    # - disables scheduling new frames on cursor movement for fullscreen apps with VRR enabled to avoid framerate spikes (requires no_hardware_cursors = true)
    # no_break_fs_vrr = false

    # - minimum refresh rate for cursor movement when no_break_fs_vrr is active. Set to minimum supported refresh rate or higher
    # min_refresh_rate = 24

    # - the padding, in logical px, between screen edges and the cursor
    # hotspot_padding = 1

    # - in seconds, after how many seconds of cursor’s inactivity to hide it. Set to 0 for never.
    #inactive_timeout = 5

    # - if true, will not warp the cursor in many cases (focusing, keybinds, etc)
    #   (doesn't move the cursor when changing window focus)
    # no_warps = false

    # - When a window is refocused, the cursor returns to its last position relative to that window, rather than to the centre.
    # persistent_warps = false

    # - If true, move the cursor to the last focused window after changing the workspace.
    # warp_on_change_workspace = false

    # - the name of a default monitor for the cursor to be set to on startup (see hyprctl monitors for names)
    # default_monitor =

    # - the factor to zoom by around the cursor. Like a magnifying glass. Minimum 1.0 (meaning no zoom)
    # zoom_factor = 1.0

    # - whether the zoom should follow the cursor rigidly (cursor is always centered if it can be) or loosely
    # zoom_rigid = false

    # - whether to enable hyprcursor support
    # enable_hyprcursor = true

    # - Hides the cursor when you press any key until the mouse is moved
    hide_on_key_press = true

    # - Hides the cursor when the last input was a touch input until a mouse input is done.
    # hide_on_touch = true

    # - Makes HW cursors work on Nvidia, at the cost of a possible hitch whenever the image changes
    # allow_dumb_copy = false
}

ecosystem {
    # disable the popup that shows up when you update hyprland to a new version.
    no_update_news = true

    # disable the popup that shows up twice a year encouraging to donate.
    no_donation_nag = true
}
